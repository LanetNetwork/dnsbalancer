include(FindPkgConfig)
if (PKG_CONFIG_FOUND)
	pkg_check_modules(LIBLDNS ldns)
	if (NOT LIBLDNS_FOUND)
		message(WARNING "ldns is not found, checking alternative name, libldns")
		pkg_check_modules(LIBLDNS REQUIRED libldns)
	endif (NOT LIBLDNS_FOUND)
	pkg_check_modules(LIBUNWIND REQUIRED libunwind)
	pkg_check_modules(LIBINI_CONFIG REQUIRED ini_config)
	if(NOT CMAKE_BUILD_TYPE MATCHES Debug)
		pkg_check_modules(LIBTCMALLOC_MINIMAL libtcmalloc_minimal)
		if (LIBTCMALLOC_MINIMAL_FOUND)
			set(GB_LD_EXTRA "${LIBTCMALLOC_MINIMAL_LIBRARIES}")
		endif (LIBTCMALLOC_MINIMAL_FOUND)
	endif (NOT CMAKE_BUILD_TYPE MATCHES Debug)
else (PKG_CONFIG_FOUND)
	message(FATAL_ERROR "pkg-config is missing. Unable to continue. Please install it.")
endif (PKG_CONFIG_FOUND)

include(CheckSymbolExists)
check_symbol_exists(EPOLLEXCLUSIVE "sys/epoll.h" DS_HAVE_UAPI_EPOLLEXCLUSIVE)
if (NOT DS_HAVE_UAPI_EPOLLEXCLUSIVE)
check_symbol_exists(EPOLLEXCLUSIVE "linux/eventpoll.h" DS_HAVE_KAPI_EPOLLEXCLUSIVE)
endif (NOT DS_HAVE_UAPI_EPOLLEXCLUSIVE)
check_symbol_exists(SO_REUSEPORT "netinet/in.h" DS_HAVE_UAPI_SO_REUSEPORT)

include(CheckTypeSize)
set(CMAKE_EXTRA_INCLUDE_FILES stdatomic.h)
check_type_size("atomic_size_t" DS_ATOMIC_SIZE_T)
set(CMAKE_EXTRA_INCLUDE_FILES)

set(DS_CONFIG_FLAGS "")

if (DS_HAVE_UAPI_EPOLLEXCLUSIVE)
	message(STATUS "EPOLLEXCLUSIVE from sys/epoll.h will be used")
	set(DS_CONFIG_FLAGS "${DS_CONFIG_FLAGS} -DDS_HAVE_UAPI_EPOLLEXCLUSIVE")
elseif (DS_HAVE_KAPI_EPOLLEXCLUSIVE)
	message(WARNING "EPOLLEXCLUSIVE from linux/eventpoll.h will be used")
	set(DS_CONFIG_FLAGS "${DS_CONFIG_FLAGS} -DDS_HAVE_KAPI_EPOLLEXCLUSIVE")
else (DS_HAVE_UAPI_EPOLLEXCLUSIVE)
	message(WARNING "EPOLLEXCLUSIVE is not available and will be defined manually. Application may not work.")
endif (DS_HAVE_UAPI_EPOLLEXCLUSIVE)

if (DS_HAVE_UAPI_SO_REUSEPORT)
	message(STATUS "SO_REUSEPORT from netinet/in.h will be used")
	set(DS_CONFIG_FLAGS "${DS_CONFIG_FLAGS} -DDS_HAVE_UAPI_SO_REUSEPORT")
else (DS_HAVE_UAPI_SO_REUSEPORT)
	message(WARNING "SO_REUSEPORT is not available and will be definet manually. Application may not work.")
endif (DS_HAVE_UAPI_SO_REUSEPORT)

if (HAVE_DS_ATOMIC_SIZE_T)
	message(STATUS "Compiler atomics are available and will be used")
	set(DS_CONFIG_FLAGS "${DS_CONFIG_FLAGS} -DDS_HAVE_ATOMICS")
else (HAVE_DS_ATOMIC_SIZE_T)
	message(STATUS "Compiler atomics are not available, atomic_ops.h will be used")
	pkg_check_modules(LIBATOMIC_OPS REQUIRED atomic_ops)
endif (HAVE_DS_ATOMIC_SIZE_T)

